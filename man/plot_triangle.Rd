% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/triangle.R
\name{plot_triangle}
\alias{plot_triangle}
\title{Create a triangle layout ggplot}
\usage{
plot_triangle(elements, user_plot, nrow, user_scale = "4cm", gap_size,
  point = c("top", "bottom"))
}
\arguments{
\item{elements}{facetting variable elements. Must equal
\code{\link{fibonacci_sum}(nrow)}.}

\item{user_plot}{bare name of a user-supplied plotting function. See details.}

\item{nrow}{number of rows to generate.}

\item{user_scale}{overall scaling factor and unit, e.g. "2cm". See details.}

\item{gap_size}{size of the gap between rows and plots in a row (bare
quantity, e.g. 0.2). If missing, this will be taken as 1/4 of
\code{user_scale}.}

\item{point}{should the point of the triangle be at the top or the bottom?}
}
\value{
(invisibly) a gtable containing multiple grobs defining the triangle
plot.
}
\description{
Create a triangle layout ggplot
}
\details{
The user-supplied function should take a single argument (name is not
important, but e.g. letter) which filters the plot to just the relevant
letter. It should return the ggplot object. See demo(random_walk).

The scale is a text string, e.g. "2cm" which will be separated into a numeric
and text component. The numeric component will scale the plot, while the text
component sets the units.
}
\examples{
\dontrun{
rw <- plot_triangle(letters[1:19], ggshape_random_walk,
                    nrow = 5, user_scale = "3cm", gap_size = 0.2,
                    point = "bottom")
ggsave(rw, filename = "random_triangle_down.png", width = 12, height = 8)
rw <- plot_triangle(letters[1:19], ggshape_random_walk,
                    nrow = 5, user_scale = "3cm", gap_size = 0.2,
                    point = "top")
ggsave(rw, filename = "random_triangle_up.png", width = 12, height = 8)
lang <- plot_triangle(letters[1:19], ggshape_lang_diffs,
                      nrow = 5, user_scale = "3cm", gap_size = 0.2,
                      point = "top")
ggsave(lang, filename = "languages_triangle_up.png", width = 12, height = 8)
eng <- plot_triangle(letters[1:19], ggshape_english_usage,
                     nrow = 5, user_scale = "3cm", gap_size = 0.2,
                     point = "top")
ggsave(eng, filename = "english_triangle_up.png", width = 12, height = 8)
nums <- plot_triangle(1:11, ggshape_rainbow_text,
                      nrow = 4, user_scale = "3cm", gap_size = 0.2,
                      point = "top")
ggsave(nums, filename = "rainbow_nums_triangle_up_11.png", width = 12, height = 8)
nums <- plot_triangle(1:32, ggshape_rainbow_text,
                      nrow = 6, user_scale = "3cm", gap_size = 0.2,
                      point = "top")
ggsave(nums, filename = "rainbow_nums_triangle_up_32.png", width = 12, height = 8)
}
}
